# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Reservation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reservedDate: String!
  duration: Float!
  amount: Float!
  stripeChargeId: String
  status: [ReservationStatus!]!
  user: User!
  parkingSpot: ParkingSpot!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ReservationStatus {
  RESERVED
  ONGOING
  FINISHED
}

type ParkingSpot {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  lat: Float!
  lng: Float!
  price: Float!
  picture_url: String
  daysAvailable: [Float!]!
  startHour: Float!
  endHour: Float!
  street: String
  zipCode: String
  city: String
  country: String
  user: User!
  userId: Float!
  reservations: [Reservation!]
  complains: User
}

type Complain {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  pictureUrl: String!
  user: User!
  parkingSpot: ParkingSpot!
}

type Todo {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  completed: Boolean
  user: User!
  userId: Float!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String
  pictureUrl: String
  roles: [Role!]!
  reservations: [Reservation!]
  complains: [Complain!]
  bankInfo: String
  parkingSpots: [ParkingSpot!]
  todos: [Todo!]
}

enum Role {
  USER
  RENTER
  ADMIN
}

type AuthResponse {
  accessToken: String!
  user: User!
}

type Query {
  """Get logged in user"""
  me: User

  """List all Users"""
  findAllUsers: [User!]!

  """Find one User"""
  findOneUser(id: ID!): User!

  """List all Todos"""
  findAllTodos: [Todo!]!

  """Find one Todo"""
  findOneTodo(id: ID!): Todo!
  protect: String!

  """Find all ParkingSpots"""
  findAllParkingSpots: [ParkingSpot!]!

  """Find one ParkingSpot"""
  findOneParkingSpot(id: ID!): ParkingSpot!

  """Find logged in user's ParkingSpots"""
  findMyParkingSpots: [ParkingSpot!]!
  testGeocoding: String!
}

type Mutation {
  """Login user"""
  login(input: LoginInput!): AuthResponse!

  """Register user"""
  register(input: RegisterInput!): User!

  """Logout user"""
  logout: Boolean!

  """Logout user"""
  updateProfile(input: ProfileInput!): AuthResponse!

  """Create User"""
  createUser(input: UserInput!): User!

  """Update User"""
  updateUser(input: UserInput!, id: ID!): User!

  """Delete User"""
  deleteUser(id: ID!): User!

  """Custom Create Todo"""
  createTodo(input: TodoInput!): Todo!

  """Update Todo"""
  updateTodo(input: TodoInput!, id: ID!): Todo!

  """Delete Todo"""
  deleteTodo(id: ID!): Todo!

  """Create ParkingSpot"""
  createParkingSpot(input: ParkingSpotInput!): ParkingSpot!

  """Update ParkingSpot"""
  updateParkingSpot(input: ParkingSpotInput!, id: ID!): ParkingSpot!

  """Delete ParkingSpot"""
  deleteParkingSpot(id: ID!): ParkingSpot!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input ProfileInput {
  firstName: String
  lastName: String
  phone: String
  bankInfo: String
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input TodoInput {
  title: String
  completed: Boolean
}

input ParkingSpotInput {
  price: Float
  lat: Float
  lng: Float
  daysAvailable: [Float!]!
  startHour: Float!
  endHour: Float!
}
